diff --git a/node_modules/@babylonjs/core/Engines/WebGPU/Extensions/engine.computeShader.js b/node_modules/@babylonjs/core/Engines/WebGPU/Extensions/engine.computeShader.js
index d52e5a2..6f6cf28 100644
--- a/node_modules/@babylonjs/core/Engines/WebGPU/Extensions/engine.computeShader.js
+++ b/node_modules/@babylonjs/core/Engines/WebGPU/Extensions/engine.computeShader.js
@@ -64,7 +64,7 @@ WebGPUEngine.prototype._computeDispatch = function (effect, context, bindings, x
         computePass.setBindGroup(i, bindGroup);
     }
     if (buffer !== undefined) {
-        computePass.dispatchWorkgroupsIndirect(buffer.underlyingResource(), offset);
+        computePass.dispatchWorkgroupsIndirect(buffer.underlyingResource, offset);
     }
     else {
         if (x + y + z > 0) {
diff --git a/node_modules/@babylonjs/core/Engines/constants.d.ts b/node_modules/@babylonjs/core/Engines/constants.d.ts
index bcef03d..d425a21 100644
--- a/node_modules/@babylonjs/core/Engines/constants.d.ts
+++ b/node_modules/@babylonjs/core/Engines/constants.d.ts
@@ -599,6 +599,8 @@ export declare class Constants {
     static readonly BUFFER_CREATIONFLAG_INDEX = 16;
     /** Flag to create a buffer suitable to be used as a storage buffer */
     static readonly BUFFER_CREATIONFLAG_STORAGE = 32;
+    /** Flag to create a buffer suitable to be used for indirect calls, such as `dispatchIndirect` */
+    static readonly BUFFER_CREATIONFLAG_INDIRECT = 64;
     /**
      * Prefixes used by the engine for sub mesh draw wrappers
      */
diff --git a/node_modules/@babylonjs/core/Engines/constants.js b/node_modules/@babylonjs/core/Engines/constants.js
index 24e5362..677c818 100644
--- a/node_modules/@babylonjs/core/Engines/constants.js
+++ b/node_modules/@babylonjs/core/Engines/constants.js
@@ -604,6 +604,8 @@ Constants.BUFFER_CREATIONFLAG_VERTEX = 8;
 Constants.BUFFER_CREATIONFLAG_INDEX = 16;
 /** Flag to create a buffer suitable to be used as a storage buffer */
 Constants.BUFFER_CREATIONFLAG_STORAGE = 32;
+/** Flag to create a buffer suitable to be used for indirect calls, such as `dispatchIndirect` */
+Constants.BUFFER_CREATIONFLAG_INDIRECT = 64;
 /**
  * Prefixes used by the engine for sub mesh draw wrappers
  */
diff --git a/node_modules/@babylonjs/core/Engines/webgpuEngine.js b/node_modules/@babylonjs/core/Engines/webgpuEngine.js
index d4106b9..a1a902e 100644
--- a/node_modules/@babylonjs/core/Engines/webgpuEngine.js
+++ b/node_modules/@babylonjs/core/Engines/webgpuEngine.js
@@ -1378,6 +1378,9 @@ export class WebGPUEngine extends AbstractEngine {
         if (creationFlags & 32) {
             flags |= WebGPUConstants.BufferUsage.Storage;
         }
+        if (creationFlags & 64) {
+            flags |= WebGPUConstants.BufferUsage.Indirect;
+        }
         return this._bufferManager.createBuffer(view, flags, label);
     }
     /**
